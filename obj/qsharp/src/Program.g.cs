//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"FactorIT\",\"Name\":\"FactorSemiPrime\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":16,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"number\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"useRobustPhaseEstimation\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":64}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"FactorSemiPrime\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":16,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"FactorIT\",\"Name\":\"ApplyOrderFindingOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Generator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulus\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":58}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"power\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":65},\"Item2\":{\"Line\":1,\"Column\":70}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":78},\"Item2\":{\"Line\":1,\"Column\":84}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"ApplyOrderFindingOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"ApplyOrderFindingOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsAdjoint specialization for FactorIT.ApplyOrderFindingOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"ApplyOrderFindingOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlled specialization for FactorIT.ApplyOrderFindingOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"ApplyOrderFindingOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":46,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for FactorIT.ApplyOrderFindingOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"FactorIT\",\"Name\":\"EstimatePeriod\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Generator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulus\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":23},\"Item2\":{\"Line\":2,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"useRobustPhaseEstimation\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":35},\"Item2\":{\"Line\":2,\"Column\":59}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"EstimatePeriod\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"FactorIT\",\"Name\":\"EstimateFrequency\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":77,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Generator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulus\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":52}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"useRobustPhaseEstimation\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":81}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitsize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":89},\"Item2\":{\"Line\":1,\"Column\":96}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Bool\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"EstimateFrequency\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":77,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"FactorIT\",\"Name\":\"PeriodFromFrequency\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":102,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulus\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":16}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"frequencyEstimate\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bitPrecision\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":21}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currentDivisor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":23}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"PeriodFromFrequency\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":102,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"FactorIT\",\"Name\":\"MaybeFactorsFromPeriod\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":112,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulus\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Generator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":54}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"period\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":65}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Bool\"},{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"FactorIT\",\"Name\":\"MaybeFactorsFromPeriod\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Priyanshu Kumar\\\\Documents\\\\FactorIT\\\\Program.qs\",\"Position\":{\"Item1\":112,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
#line hidden
namespace FactorIT
{
    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Body, 17, 47)]
    public partial class FactorSemiPrime : Operation<(Int64,Boolean), (Int64,Int64)>, ICallable
    {
        public FactorSemiPrime(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Boolean)>, IApplyData
        {
            public In((Int64,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "FactorSemiPrime";
        String ICallable.FullName => "FactorIT.FactorSemiPrime";
        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumRandomDrawRandomInt
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> MicrosoftQuantumMathIsCoprimeI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Boolean), Int64> EstimatePeriod
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), (Boolean,(Int64,Int64))> MaybeFactorsFromPeriod
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathGreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Boolean), (Int64,Int64)> Body => (__in__) =>
        {
            var (number,useRobustPhaseEstimation) = __in__;
#line 18 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            if (((number % 2L) == 0L))
            {
#line 19 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                Message.Apply("WTF dude ? , Give me Prime Numbers only");
#line 20 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                return ((number / 2L), 2L);
            }

#line 22 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var FoundFactor = false;
#line 23 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var factor = (1L, 1L);
#line 25 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            while (true)
            {
#line 26 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                var Generator = (MicrosoftQuantumRandomDrawRandomInt.Apply((1L, (number - 2L))) + 1L);
#line 28 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                if (MicrosoftQuantumMathIsCoprimeI.Apply((Generator, number)))
                {
#line 29 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    Message.Apply(String.Format("Estimating period if {0}", Generator));
#line 30 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    var Period = EstimatePeriod.Apply((Generator, number, useRobustPhaseEstimation));
#line 31 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    Message.Apply(String.Format("Estimated Period is : {0}", Period));
#line 32 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    (FoundFactor, factor) = MaybeFactorsFromPeriod.Apply((number, Generator, Period));
                }
                else
                {
#line 35 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    var gcd = MicrosoftQuantumMathGreatestCommonDivisorI.Apply((number, Generator));
#line 36 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    Message.Apply(String.Format("We are guessing the Prime of {0} to be {1} , bcuz why not ?", number, gcd));
#line 37 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    FoundFactor = true;
#line 38 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    factor = (gcd, (number / gcd));
                }

                if (FoundFactor)
                {
                    break;
                }
                else
                {
#line 43 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    Message.Apply("=( , plz wait , trying again");
                }
            }

#line 45 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            return factor;
        }

        ;
        public override void Init()
        {
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumRandomDrawRandomInt = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Random.DrawRandomInt));
            this.MicrosoftQuantumMathIsCoprimeI = this.Factory.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Math.IsCoprimeI));
            this.EstimatePeriod = this.Factory.Get<ICallable<(Int64,Int64,Boolean), Int64>>(typeof(EstimatePeriod));
            this.MaybeFactorsFromPeriod = this.Factory.Get<ICallable<(Int64,Int64,Int64), (Boolean,(Int64,Int64))>>(typeof(MaybeFactorsFromPeriod));
            this.MicrosoftQuantumMathGreatestCommonDivisorI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __dataIn((Int64,Boolean) data) => new In(data);
        public override IApplyData __dataOut((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 number, Boolean useRobustPhaseEstimation)
        {
            return __m__.Run<FactorSemiPrime, (Int64,Boolean), (Int64,Int64)>((number, useRobustPhaseEstimation));
        }
    }

    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Body, 47, 52)]
    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Adjoint, 47, 52)]
    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Controlled, 47, 52)]
    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.ControlledAdjoint, 47, 52)]
    public partial class ApplyOrderFindingOracle : Unitary<(Int64,Int64,Int64,IQArray<Qubit>)>, ICallable
    {
        public ApplyOrderFindingOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,Int64,Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item4)?.Qubits;
                }
            }
        }

        String ICallable.Name => "ApplyOrderFindingOracle";
        String ICallable.FullName => "FactorIT.ApplyOrderFindingOracle";
        protected ICallable<(Boolean,String), QVoid> MicrosoftQuantumDiagnosticsFact
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> MicrosoftQuantumMathIsCoprimeI
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticMultiplyByModularInteger
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> MicrosoftQuantumMathExpModI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,IQArray<Qubit>), QVoid> Body => (__in__) =>
        {
            var (Generator,modulus,power,target) = __in__;
#line 49 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumDiagnosticsFact.Apply((MicrosoftQuantumMathIsCoprimeI.Apply((Generator, modulus)), "`Generator` and `modulus` must be coprime"));
#line 50 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumArithmeticMultiplyByModularInteger.Apply((MicrosoftQuantumMathExpModI.Apply((Generator, power, modulus)), modulus, new Microsoft.Quantum.Arithmetic.LittleEndian(target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,Int64,Int64,IQArray<Qubit>), QVoid> AdjointBody => (__in__) =>
        {
            var (Generator,modulus,power,target) = __in__;
#line 47 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumDiagnosticsFact.Apply((MicrosoftQuantumMathIsCoprimeI.Apply((Generator, modulus)), "`Generator` and `modulus` must be coprime"));
#line 47 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumArithmeticMultiplyByModularInteger.Adjoint.Apply((MicrosoftQuantumMathExpModI.Apply((Generator, power, modulus)), modulus, new Microsoft.Quantum.Arithmetic.LittleEndian(target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,Int64,IQArray<Qubit>)), QVoid> ControlledBody => (__in__) =>
        {
            var (__controlQubits__,(Generator,modulus,power,target)) = __in__;
#line 47 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumDiagnosticsFact.Apply((MicrosoftQuantumMathIsCoprimeI.Apply((Generator, modulus)), "`Generator` and `modulus` must be coprime"));
#line 47 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumArithmeticMultiplyByModularInteger.Controlled.Apply((__controlQubits__, (MicrosoftQuantumMathExpModI.Apply((Generator, power, modulus)), modulus, new Microsoft.Quantum.Arithmetic.LittleEndian(target))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,Int64,IQArray<Qubit>)), QVoid> ControlledAdjointBody => (__in__) =>
        {
            var (__controlQubits__,(Generator,modulus,power,target)) = __in__;
#line 47 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumDiagnosticsFact.Apply((MicrosoftQuantumMathIsCoprimeI.Apply((Generator, modulus)), "`Generator` and `modulus` must be coprime"));
#line 47 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumArithmeticMultiplyByModularInteger.Adjoint.Controlled.Apply((__controlQubits__, (MicrosoftQuantumMathExpModI.Apply((Generator, power, modulus)), modulus, new Microsoft.Quantum.Arithmetic.LittleEndian(target))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsFact = this.Factory.Get<ICallable<(Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.Fact));
            this.MicrosoftQuantumMathIsCoprimeI = this.Factory.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Math.IsCoprimeI));
            this.MicrosoftQuantumArithmeticMultiplyByModularInteger = this.Factory.Get<IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyByModularInteger));
            this.MicrosoftQuantumMathExpModI = this.Factory.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __dataIn((Int64,Int64,Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 Generator, Int64 modulus, Int64 power, IQArray<Qubit> target)
        {
            return __m__.Run<ApplyOrderFindingOracle, (Int64,Int64,Int64,IQArray<Qubit>), QVoid>((Generator, modulus, power, target));
        }
    }

    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Body, 52, 78)]
    public partial class EstimatePeriod : Operation<(Int64,Int64,Boolean), Int64>, ICallable
    {
        public EstimatePeriod(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Boolean)>, IApplyData
        {
            public In((Int64,Int64,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "EstimatePeriod";
        String ICallable.FullName => "FactorIT.EstimatePeriod";
        protected ICallable<(Boolean,String), QVoid> MicrosoftQuantumDiagnosticsFact
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> MicrosoftQuantumMathIsCoprimeI
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> MicrosoftQuantumMathBitSizeI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Boolean,Int64), Int64> EstimateFrequency
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,Int64), Int64> PeriodFromFrequency
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> MicrosoftQuantumMathExpModI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Boolean), Int64> Body => (__in__) =>
        {
            var (Generator,modulus,useRobustPhaseEstimation) = __in__;
#line 55 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            MicrosoftQuantumDiagnosticsFact.Apply((MicrosoftQuantumMathIsCoprimeI.Apply((Generator, modulus)), "`Generator` and `modulus` must be Coprime"));
#line 56 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var result = 1L;
#line 57 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var bitsize = MicrosoftQuantumMathBitSizeI.Apply(modulus);
#line 58 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var bitPrecision = ((2L * bitsize) + 1L);
#line 59 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var frequencyEstimate = 0L;
#line 61 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            while (true)
            {
#line 62 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                frequencyEstimate = EstimateFrequency.Apply((Generator, modulus, useRobustPhaseEstimation, bitsize));
#line 63 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                if ((frequencyEstimate != 0L))
                {
#line 64 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    result = PeriodFromFrequency.Apply((modulus, frequencyEstimate, bitPrecision, result));
                }
                else
                {
#line 68 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    Message.Apply("The frequency was 0 , Trying again");
                }

                if ((MicrosoftQuantumMathExpModI.Apply((Generator, result, modulus)) == 1L))
                {
                    break;
                }
                else
                {
#line 74 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    Message.Apply("The estimated period failed , trying again =(");
                }
            }

#line 76 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            return result;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumDiagnosticsFact = this.Factory.Get<ICallable<(Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.Fact));
            this.MicrosoftQuantumMathIsCoprimeI = this.Factory.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Math.IsCoprimeI));
            this.MicrosoftQuantumMathBitSizeI = this.Factory.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.BitSizeI));
            this.EstimateFrequency = this.Factory.Get<ICallable<(Int64,Int64,Boolean,Int64), Int64>>(typeof(EstimateFrequency));
            this.PeriodFromFrequency = this.Factory.Get<ICallable<(Int64,Int64,Int64,Int64), Int64>>(typeof(PeriodFromFrequency));
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumMathExpModI = this.Factory.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
        }

        public override IApplyData __dataIn((Int64,Int64,Boolean) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 Generator, Int64 modulus, Boolean useRobustPhaseEstimation)
        {
            return __m__.Run<EstimatePeriod, (Int64,Int64,Boolean), Int64>((Generator, modulus, useRobustPhaseEstimation));
        }
    }

    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Body, 78, 103)]
    public partial class EstimateFrequency : Operation<(Int64,Int64,Boolean,Int64), Int64>, ICallable
    {
        public EstimateFrequency(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Boolean,Int64)>, IApplyData
        {
            public In((Int64,Int64,Boolean,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "EstimateFrequency";
        String ICallable.FullName => "FactorIT.EstimateFrequency";
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> MicrosoftQuantumArithmeticLittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> MicrosoftQuantumArithmeticApplyXorInPlace
        {
            get;
            set;
        }

        protected ICallable<IUnitary, Microsoft.Quantum.Oracles.DiscreteOracle> MicrosoftQuantumOraclesDiscreteOracle
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Int64,IQArray<Qubit>)> ApplyOrderFindingOracle
        {
            get;
            set;
        }

        protected ICallable<(Int64,Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>), Double> MicrosoftQuantumCharacterizationRobustPhaseEstimation
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> MicrosoftQuantumMathRound
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> MicrosoftQuantumConvertIntAsDouble
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> MicrosoftQuantumMathPI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)> MicrosoftQuantumCharacterizationQuantumPhaseEstimation
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Microsoft.Quantum.Arithmetic.BigEndian> MicrosoftQuantumArithmeticLittleEndianAsBigEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> MicrosoftQuantumArithmeticMeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Boolean,Int64), Int64> Body => (__in__) =>
        {
            var (Generator,modulus,useRobustPhaseEstimation,bitsize) = __in__;
#line 80 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var frequencyEstimate = 0L;
#line 81 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var bitPrecision = ((2L * bitsize) + 1L);
#line hidden
            {
#line 82 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                var eigenstateRegister = Allocate.Apply(bitsize);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 83 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    var eigenstateRegisterLE = new Microsoft.Quantum.Arithmetic.LittleEndian(eigenstateRegister);
#line 84 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    MicrosoftQuantumArithmeticApplyXorInPlace.Apply((1L, eigenstateRegisterLE));
#line 85 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    var oracle = new Microsoft.Quantum.Oracles.DiscreteOracle(ApplyOrderFindingOracle.Partial(new Func<(Int64,IQArray<Qubit>), (Int64,Int64,Int64,IQArray<Qubit>)>((__arg2__) => (Generator, modulus, __arg2__.Item1, __arg2__.Item2))));
#line 86 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    if (useRobustPhaseEstimation)
                    {
#line 87 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                        var phase = MicrosoftQuantumCharacterizationRobustPhaseEstimation.Apply((bitPrecision, oracle, eigenstateRegisterLE.Data));
#line 88 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                        frequencyEstimate = MicrosoftQuantumMathRound.Apply((((phase * MicrosoftQuantumConvertIntAsDouble.Apply(2L.Pow(bitPrecision))) / 2D) / MicrosoftQuantumMathPI.Apply(QVoid.Instance)));
                    }
                    else
                    {
#line hidden
                        {
#line 91 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                            var register = Allocate.Apply(bitPrecision);
#line hidden
                            bool __arg3__ = true;
                            try
                            {
#line 92 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                                var frequencyEstimateNumerator = new Microsoft.Quantum.Arithmetic.LittleEndian(register);
#line 93 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                                MicrosoftQuantumCharacterizationQuantumPhaseEstimation.Apply((oracle, eigenstateRegisterLE.Data, MicrosoftQuantumArithmeticLittleEndianAsBigEndian.Apply(frequencyEstimateNumerator)));
#line 96 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                                frequencyEstimate = MicrosoftQuantumArithmeticMeasureInteger.Apply(frequencyEstimateNumerator);
                            }
#line hidden
                            catch
                            {
                                __arg3__ = false;
                                throw;
                            }
#line hidden
                            finally
                            {
                                if (__arg3__)
                                {
#line hidden
                                    Release.Apply(register);
                                }
                            }
                        }
                    }

#line 99 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    ResetAll.Apply(eigenstateRegister);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(eigenstateRegister);
                    }
                }
            }

#line 101 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            return frequencyEstimate;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release = this.Factory.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumArithmeticLittleEndian = this.Factory.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.MicrosoftQuantumArithmeticApplyXorInPlace = this.Factory.Get<IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.ApplyXorInPlace));
            this.MicrosoftQuantumOraclesDiscreteOracle = this.Factory.Get<ICallable<IUnitary, Microsoft.Quantum.Oracles.DiscreteOracle>>(typeof(global::Microsoft.Quantum.Oracles.DiscreteOracle));
            this.ApplyOrderFindingOracle = this.Factory.Get<IUnitary<(Int64,Int64,Int64,IQArray<Qubit>)>>(typeof(ApplyOrderFindingOracle));
            this.MicrosoftQuantumCharacterizationRobustPhaseEstimation = this.Factory.Get<ICallable<(Int64,Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>), Double>>(typeof(global::Microsoft.Quantum.Characterization.RobustPhaseEstimation));
            this.MicrosoftQuantumMathRound = this.Factory.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.MicrosoftQuantumConvertIntAsDouble = this.Factory.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.MicrosoftQuantumMathPI = this.Factory.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.MicrosoftQuantumCharacterizationQuantumPhaseEstimation = this.Factory.Get<IUnitary<(Microsoft.Quantum.Oracles.DiscreteOracle,IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian)>>(typeof(global::Microsoft.Quantum.Characterization.QuantumPhaseEstimation));
            this.MicrosoftQuantumArithmeticLittleEndianAsBigEndian = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian));
            this.MicrosoftQuantumArithmeticMeasureInteger = this.Factory.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.ResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn((Int64,Int64,Boolean,Int64) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 Generator, Int64 modulus, Boolean useRobustPhaseEstimation, Int64 bitsize)
        {
            return __m__.Run<EstimateFrequency, (Int64,Int64,Boolean,Int64), Int64>((Generator, modulus, useRobustPhaseEstimation, bitsize));
        }
    }

    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Body, 103, 113)]
    public partial class PeriodFromFrequency : Function<(Int64,Int64,Int64,Int64), Int64>, ICallable
    {
        public PeriodFromFrequency(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "PeriodFromFrequency";
        String ICallable.FullName => "FactorIT.PeriodFromFrequency";
        protected ICallable<(Microsoft.Quantum.Math.Fraction,Int64), Microsoft.Quantum.Math.Fraction> MicrosoftQuantumMathContinuedFractionConvergentI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Microsoft.Quantum.Math.Fraction> MicrosoftQuantumMathFraction
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> MicrosoftQuantumMathAbsI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathGreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,Int64), Int64> Body => (__in__) =>
        {
            var (modulus,frequencyEstimate,bitPrecision,currentDivisor) = __in__;
#line 109 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var (numerator,Period) = MicrosoftQuantumMathContinuedFractionConvergentI.Apply((new Microsoft.Quantum.Math.Fraction((frequencyEstimate, 2L.Pow(bitPrecision))), modulus)).Data;
#line 110 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            var (numeratorABS,PeriodABS) = (MicrosoftQuantumMathAbsI.Apply(numerator), MicrosoftQuantumMathAbsI.Apply(Period));
#line 111 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            return ((PeriodABS * currentDivisor) / MicrosoftQuantumMathGreatestCommonDivisorI.Apply((currentDivisor, PeriodABS)));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumMathContinuedFractionConvergentI = this.Factory.Get<ICallable<(Microsoft.Quantum.Math.Fraction,Int64), Microsoft.Quantum.Math.Fraction>>(typeof(global::Microsoft.Quantum.Math.ContinuedFractionConvergentI));
            this.MicrosoftQuantumMathFraction = this.Factory.Get<ICallable<(Int64,Int64), Microsoft.Quantum.Math.Fraction>>(typeof(global::Microsoft.Quantum.Math.Fraction));
            this.MicrosoftQuantumMathAbsI = this.Factory.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.AbsI));
            this.MicrosoftQuantumMathGreatestCommonDivisorI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __dataIn((Int64,Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 modulus, Int64 frequencyEstimate, Int64 bitPrecision, Int64 currentDivisor)
        {
            return __m__.Run<PeriodFromFrequency, (Int64,Int64,Int64,Int64), Int64>((modulus, frequencyEstimate, bitPrecision, currentDivisor));
        }
    }

    [SourceLocation("C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs", OperationFunctor.Body, 113, -1)]
    public partial class MaybeFactorsFromPeriod : Function<(Int64,Int64,Int64), (Boolean,(Int64,Int64))>, ICallable
    {
        public MaybeFactorsFromPeriod(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Boolean,(Int64,Int64))>, IApplyData
        {
            public Out((Boolean,(Int64,Int64)) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "MaybeFactorsFromPeriod";
        String ICallable.FullName => "FactorIT.MaybeFactorsFromPeriod";
        protected ICallable<(Int64,Int64,Int64), Int64> MicrosoftQuantumMathExpModI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathMaxI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> MicrosoftQuantumMathGreatestCommonDivisorI
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), (Boolean,(Int64,Int64))> Body => (__in__) =>
        {
            var (modulus,Generator,period) = __in__;
#line 114 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
            if (((period % 2L) == 0L))
            {
#line 115 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                var halfPower = MicrosoftQuantumMathExpModI.Apply((Generator, (period / 2L), modulus));
#line 116 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                if ((halfPower != (modulus - 1L)))
                {
#line 117 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    var factor = MicrosoftQuantumMathMaxI.Apply((MicrosoftQuantumMathGreatestCommonDivisorI.Apply(((halfPower - 1L), modulus)), MicrosoftQuantumMathGreatestCommonDivisorI.Apply(((halfPower + 1L), modulus))));
#line 121 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    return (true, (factor, (modulus / factor)));
                }
                else
                {
#line 125 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                    return (false, (1L, 1L));
                }
            }
            else
            {
#line 129 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                Message.Apply("Estimated Perioud is odd , trying again");
#line 130 "C:\\Users\\Priyanshu Kumar\\Documents\\FactorIT\\Program.qs"
                return (false, (1L, 1L));
            }
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumMathExpModI = this.Factory.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
            this.MicrosoftQuantumMathMaxI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.MaxI));
            this.MicrosoftQuantumMathGreatestCommonDivisorI = this.Factory.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
            this.Message = this.Factory.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __dataIn((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __dataOut((Boolean,(Int64,Int64)) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Boolean,(Int64,Int64))> Run(IOperationFactory __m__, Int64 modulus, Int64 Generator, Int64 period)
        {
            return __m__.Run<MaybeFactorsFromPeriod, (Int64,Int64,Int64), (Boolean,(Int64,Int64))>((modulus, Generator, period));
        }
    }
}